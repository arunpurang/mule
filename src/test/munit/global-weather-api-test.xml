<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">
    <spring:beans>
    	<spring:import resource="classpath:configs.xml" />
    	<spring:import resource="classpath:exceptions.xml" />
        <spring:import resource="classpath:global-weather-api.xml" />
        <spring:import resource="classpath:system-api-processor.xml" />
    </spring:beans>
    <munit:config mock-connectors="false" mock-inbounds="false" doc:name="MUnit configuration"/>
    <http:request-config name="HTTP_Request_Configuration" host="localhost" port="9000" basePath="/api" doc:name="HTTP Request Configuration">
    	<http:basic-authentication password="admin" username="admin" />
    </http:request-config>
    
    <munit:test name="get:/countries:global-weather-api-config-200-application/json-FlowTest" description="Verifying functionality of [get:/countries:global-weather-api-config-200-application/json]">
    	<mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Read All Countries Names']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource('sample_data/cities_soap_mock.xml').asByteArray()]" encoding="UTF-8" mimeType="application/xml"/>
        </mock:when>
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/countries" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json" />
            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[(new groovy.json.JsonSlurper().parseText(getResource('scaffolder/response/get_200_countries_application_json.json').asString()))]" actualValue="#[(new groovy.json.JsonSlurper().parseText(payload))]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/countries/country:global-weather-api-config-200-application/json-FlowTest" description="Verifying functionality of [get:/countries/country:global-weather-api-config-200-application/json]">
    	<mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Read Country']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource('sample_data/cities_soap_mock.xml').asByteArray()]" encoding="UTF-8" mimeType="application/xml"/>
        </mock:when>
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/countries/Australia" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json" />
            </http:request-builder>
        </http:request>
        
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[(new groovy.json.JsonSlurper().parseText(getResource('scaffolder/response/get_200_countries_Australia_application_json.json').asString()))]" actualValue="#[(new groovy.json.JsonSlurper().parseText(payload))]" doc:name="assert that - payload is as expected" />
        
    </munit:test>
    <munit:test name="get:/countries/country/cities:global-weather-api-config-200-application/json-FlowTest" description="Verifying functionality of [get:/countries/country/cities:global-weather-api-config-200-application/json]">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Read Cities By Country Name']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource('sample_data/cities_soap_mock.xml').asByteArray()]" encoding="UTF-8" mimeType="application/xml"/>
        </mock:when>
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/countries/Australia/cities" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>
            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" mimeType="application/json"/>
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[(new groovy.json.JsonSlurper().parseText(getResource('scaffolder/response/get_200_countries_Australia_cities_application_json.json').asString()))]" actualValue="#[(new groovy.json.JsonSlurper().parseText(payload))]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/countries/country/weather:global-weather-api-config-200-application/json-FlowTest" description="Verifying functionality of [get:/countries/country/weather:global-weather-api-config-200-application/json]">
    	<mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Read Country Weather']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource('sample_data/GetWeatherResponse.xml').asByteArray()]" encoding="UTF-8" mimeType="application/xml"/>
        </mock:when>
        
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/countries/Australia/weather" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json" />
            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[(new groovy.json.JsonSlurper().parseText(getResource('scaffolder/response/get_200_countries_Australia_weather_application_json.json').asString()))]" actualValue="#[(new groovy.json.JsonSlurper().parseText(payload))]" doc:name="assert that - payload is as expected" />
    </munit:test>
    
    <munit:test name="get:/countries/country/cities/city/weather:global-weather-api-config-200-application/json-FlowTest" description="Verifying functionality of [get:/countries/country/cities/city/weather:global-weather-api-config-200-application/json]">
    	<mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Read City Weather']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource('sample_data/GetWeatherResponse.xml').asByteArray()]" encoding="UTF-8" mimeType="application/xml"/>
        </mock:when>
        
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/countries/Australia/cities/Dubbo/weather" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json" />
            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[(new groovy.json.JsonSlurper().parseText(getResource('scaffolder/response/get_200_countries_Australia_cities_Dubbo_weather_application_json.json').asString()))]" actualValue="#[(new groovy.json.JsonSlurper().parseText(payload))]" doc:name="assert that - payload is as expected" />
        
    </munit:test>
	
	<munit:test name="get:/countries/country/cities/city:global-weather-api-config-200-application/json-FlowTest" description="Verifying functionality of [get:/countries/country/cities/city:global-weather-api-config-200-application/json]">
		<mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Read City From Country']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource('sample_data/cities_soap_mock_Dubbo.xml').asByteArray()]" encoding="UTF-8" mimeType="application/xml"/>

        </mock:when>
        
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/countries/Australia/cities/Dubbo" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json" />
            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[(new groovy.json.JsonSlurper().parseText(getResource('scaffolder/response/get_200_countries_Australia_cities_Dubbo_application_json.json').asString()))]" actualValue="#[(new groovy.json.JsonSlurper().parseText(payload))]" doc:name="assert that - payload is as expected" />
        
    </munit:test>

    
	<munit:test name="get:/countries:global-weather-api-config-500-application/json-FlowTest" description="Verifying functionality of [get:/countries:global-weather-api-config-500-application/json]">

        <mock:throw-an exception-ref="#[new java.lang.Exception()]" whenCalling=".*:.*" doc:name="Throw an Exception">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Read All Countries Names']"/>
            </mock:with-attributes>
        </mock:throw-an>

        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/countries" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json" />
            </http:request-builder>
            <http:success-status-code-validator values="500" />
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(500))]" doc:name="assert that - http.status eq 200" />
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[(new groovy.json.JsonSlurper().parseText(getResource('scaffolder/response/get_500_countries_application_json.json').asString()))]" actualValue="#[(new groovy.json.JsonSlurper().parseText(payload))]" doc:name="assert that - payload is as expected" />
        
    </munit:test>
</mule>
